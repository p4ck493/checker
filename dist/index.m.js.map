{"version":3,"file":"index.m.js","sources":["../src/methods/array.method.ts","../src/methods/number/bigInt.method.ts","../src/methods/same.method.ts","../src/methods/string/string.method.ts","../src/regexp.ts","../src/config.ts","../src/methods/object.method.ts","../src/methods/empty.method.ts","../src/methods/boolean/falsy.method.ts","../src/methods/number/infinity.method.ts","../src/methods/number/number.method.ts","../src/methods/symbol.method.ts","../src/methods/function.method.ts","../src/methods/number/numeric.method.ts","../src/methods/len.method.ts","../src/methods/system/windows.method.ts","../src/methods/hardware/ipod.method.ts","../src/methods/hardware/ipad.method.ts","../src/methods/hardware/iphone.method.ts","../src/methods/hardware/windows-phone.method.ts","../src/methods/hardware/blackberry.method.ts","../src/methods/hardware/android-phone.method.ts","../src/methods/string/date/iso/iso.method.ts","../src/methods/index.ts","../src/methods/browser/firefox.method.ts","../src/methods/browser/opera.method.ts","../src/methods/browser/ie.method.ts","../src/methods/browser/edge.method.ts","../src/methods/browser/safari.method.ts","../src/methods/browser/browser.method.ts","../src/methods/browser/chrome.method.ts","../src/methods/system/ios.method.ts","../src/methods/system/android.method.ts","../src/methods/system/mac.method.ts","../src/methods/hardware/phone.method.ts","../src/methods/hardware/mobile.method.ts","../src/methods/boolean/boolean.method.ts","../src/methods/boolean/false.method.ts","../src/methods/boolean/true.method.ts","../src/methods/boolean/truthy.method.ts","../src/methods/number/odd.method.ts","../src/methods/number/positive.method.ts","../src/methods/number/zero.method.ts","../src/methods/number/int.method.ts","../src/methods/string/space.method.ts","../src/methods/string/register/pascal-case.method.ts","../src/methods/string/register/upper-case.method.ts","../src/methods/string/register/kebab-case.method.ts","../src/methods/string/mac-address.method.ts","../src/methods/string/register/camel-case.method.ts","../src/methods/string/word.method.ts","../src/methods/string/register/snake-case.method.ts","../src/methods/string/ipv4.method.ts","../src/methods/string/ipv6.method.ts","../src/methods/string/char.method.ts","../src/methods/string/register/lower-case.method.ts","../src/methods/string/date/today.method.ts","../src/methods/string/date/tomorrow.method.ts","../src/methods/string/date/yesterday.method.ts","../src/methods/string/date/iso/iso-future.method.ts","../src/methods/string/date/iso/iso-past.method.ts","../src/methods/number/even.method.ts","../src/methods/instanceof.method.ts","../src/methods/number/negative.method.ts","../src/methods/null.method.ts","../src/methods/primitive.method.ts","../src/methods/promise.method.ts","../src/methods/undefined.method.ts"],"sourcesContent":["export function ArrayMethod<T>(target: unknown, classRef?: new () => T): target is Array<T> {\n  if (target instanceof Array) {\n    if ('function' === typeof classRef) {\n      if (target.length) {\n        return target.every((item: T) => item instanceof (classRef as any));\n      } else {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n","export function BigIntMethod(target: unknown): target is bigint {\n  return 'bigint' === typeof target;\n}\n","import { ArrayMethod } from './array.method';\n\nexport enum TypeOfValueEnum {\n  object = 'object',\n}\n\nexport function SameMethod<T>(target: T, source: T): boolean {\n  try {\n    const keysOfTarget: string[] = Object.keys(target ?? {}) ?? [];\n    const keysOfSource: string[] = Object.keys(source ?? {}) ?? [];\n\n    if (!ArrayMethod(keysOfTarget) || !ArrayMethod(keysOfSource)) {\n      return false;\n    }\n\n    if (keysOfTarget.length !== keysOfSource.length) {\n      return false;\n    }\n\n    if (!keysOfTarget.length && !keysOfSource.length) {\n      return true;\n    }\n\n    for (const keyOfObjectTwo of keysOfSource) {\n      switch (typeof (target as any)[keyOfObjectTwo]) {\n        case TypeOfValueEnum.object:\n          if (!SameMethod((target as any)[keyOfObjectTwo], (source as any)[keyOfObjectTwo])) {\n            return false;\n          }\n          break;\n        default:\n          if ((target as any)[keyOfObjectTwo] !== (source as any)[keyOfObjectTwo]) {\n            return false;\n          }\n          break;\n      }\n    }\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n","export function StringMethod(target: unknown): target is string {\n  return 'string' === typeof target;\n}\n","export const regexp = {\n  bigint: /^([-+])?(\\d+)n/,\n  word: /^[a-zA-Z]+$/,\n  ipv6: /^((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?$/,\n  ipv4: /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,\n  macAddress: /^(?:[0-9A-Fa-f]{2}[:-]){5}(?:[0-9A-Fa-f]{2})$/,\n  pascalCase: /^[A-Z][a-z0-9]*([A-Z][a-z0-9]*)*$/,\n  kebabCase: /^[a-z][a-z0-9]*(?:-[a-z0-9]+)*$/,\n  camelCase: /^[a-z][a-zA-Z0-9]*([A-Z][a-zA-Z0-9]*)*$/,\n  snakeCase: /^(?!^[0-9]+$)[a-z0-9]+(_[a-z0-9]+)*$/,\n  lowerCase: /[a-z]/,\n  upperCase: /[A-Z]/,\n  safari: /^((?!chrome|android).)*safari/i,\n  firefox: /firefox|fxios/i,\n  android: /android/i,\n  windows: /windows|^win/i,\n  opera: /OPR|Opera/i,\n  iphone: /(iPhone)/i,\n  ipad: /(iPad)/i,\n  ipod: /(iPod)/i,\n  ie: /(Trident\\/|MSIE\\s)([\\d.]+)/,\n  edge: /edge|edg|edga\\/(\\d+)/i,\n  mac: /mac/i,\n  chrome: /Chrome|CriOS/i,\n  googleInc: /Google Inc/i,\n  phone: /phone/i,\n  blackberry: /blackberry|bb10/i,\n  androidPhone: /Android.*Mobile/i,\n  space: /^\\s*$/,\n  anySpace: /\\s/,\n  iso: {\n    date: /^\\d{4}-\\d{2}-\\d{2}$/,\n    time: /^\\d{2}:\\d{2}:\\d{2}$/,\n    dateTime: /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$/,\n    dateTimeWithMs: /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d+$/,\n    any: /^(\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d{1,3})?(?:Z|[\\+\\-]\\d{2}:\\d{2})?)?)|(\\d{2}:\\d{2}:\\d{2}(?:\\.\\d{1,3})?(?:Z|[\\+\\-]\\d{2}:\\d{2})?)/,\n  },\n};\n\nexport default regexp;\n","import regexp from './regexp';\n\nexport default class Config {\n    public isNode = false;\n    public isBrowser = false;\n\n    // globalThis || self || window || global ||\n    public globalContext: any = {};\n\n    public packageName = 'thiis';\n    public useGlobalContext = true;\n\n    public error = {\n        enabled: true,\n    };\n\n    public definition = {\n        phone: 768,\n    };\n\n    public state = {\n        vendor: '',\n        navigator: this.globalContext.navigator,\n        userAgent: '',\n        platform: '',\n        screen: {\n            width: this.globalContext.screen?.width ?? 0,\n        },\n        toString: Object.prototype.toString,\n    };\n\n    public regexp = regexp;\n\n    public static create() {\n        const instance = new Config();\n        instance.isNode = 'undefined' !== typeof process && 'node' === process?.release?.name;\n        instance.isBrowser = 'undefined' !== typeof window && 'undefined' !== typeof window.document;\n\n        instance.initGlobalContext().initVendor().initUserAgent().initPlatform();\n\n        return instance;\n    }\n\n    public initGlobalContext() {\n        if ('undefined' !== typeof globalThis) {\n            this.globalContext = globalThis;\n        } else {\n            if (this.isNode) {\n                this.globalContext = global;\n            } else if (this.isBrowser) {\n                this.globalContext = window;\n            } else {\n                if ('undefined' !== typeof self) {\n                    this.globalContext = self;\n                }\n            }\n        }\n\n        return this;\n    }\n\n    public initVendor() {\n        if (this.globalContext.navigator?.vendor) {\n            this.state.vendor = this.globalContext.navigator.vendor;\n        }\n\n        return this;\n    }\n\n    public initUserAgent() {\n        if (this.globalContext.navigator?.userAgent) {\n            this.state.userAgent = this.globalContext.navigator.userAgent;\n        }\n\n        return this;\n    }\n\n    public initPlatform() {\n        if (this.globalContext.navigator?.platform) {\n            this.state.platform = this.globalContext.navigator.platform;\n        } else if (this.globalContext.navigator?.userAgentData?.platform) {\n            this.state.platform = this.globalContext.navigator.userAgentData.platform;\n        } else if (this.isNode && process?.platform) {\n            this.state.platform = process.platform;\n        }\n\n        return this;\n    }\n}\n\nexport const isConfig = Config.create();\n","import {ArrayMethod} from './array.method';\nimport {isConfig} from '../config';\n\nexport function ObjectMethod<T extends object>(target: unknown): target is T {\n    return 'object' === typeof target && !ArrayMethod(target) && null !== target;\n}\n\nexport function StrictObjectMethod<T extends object>(target: unknown): target is T {\n    return '[object Object]' === isConfig.state.toString.call(target);\n}\n","import { StringMethod } from './string/string.method';\nimport { ObjectMethod } from './object.method';\nimport { ArrayMethod } from './array.method';\n\nexport function EmptyMethod<T extends object>(target: unknown): boolean {\n  return StringEmptyMethod(target) || ArrayEmptyMethod<T>(target) || ObjectEmptyMethod<T>(target);\n}\n\nexport function StringEmptyMethod(target: unknown): boolean {\n  return StringMethod(target) && StringEmptyMethodExecute(target);\n}\n\nexport function StringEmptyMethodExecute(target: string): boolean {\n  return undefined === target.trim()[0];\n}\n\nexport function ArrayEmptyMethod<T extends object>(target: unknown): boolean {\n  return ArrayMethod<T>(target) && ArrayEmptyMethodExecute<T>(target);\n}\n\nexport function ArrayEmptyMethodExecute<T>(target: T[]): boolean {\n  return 0 >= target.length;\n}\n\nexport function ObjectEmptyMethod<T extends object>(target: unknown): boolean {\n  return ObjectMethod<T>(target) && ObjectEmptyMethodExecute(target);\n}\n\nexport function ObjectEmptyMethodExecute(target: {}): boolean {\n  if ('size' in target) {\n    // @ts-ignore\n    return target.size <= 0;\n  }\n  for (const key in target) {\n    if (target.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n  return true;\n}\n","export function FalsyMethod(target: unknown): target is false {\n  return !target;\n}\n","const INFINITY: number = 1 / 0;\nexport function InfinityMethod(target: unknown): target is number {\n  return INFINITY === target || -INFINITY === target;\n}\n","import { InfinityMethod } from './infinity.method';\n\nexport function NumberMethod(target: unknown): target is number {\n  return 'number' === typeof target && !isNaN(target) && !InfinityMethod(target);\n}\n","export function SymbolMethod(target: unknown): target is symbol {\n  return 'symbol' === typeof target;\n}\n","import { isConfig } from '../config';\n\nexport function FunctionMethod<T extends typeof Function>(target: unknown): target is T {\n  try {\n    return (\n      '[object Function]' === isConfig.state.toString.call(target) ||\n      AsyncFunctionMethod(target) ||\n      GeneratorFunctionMethod(target)\n    );\n  } catch (e) {\n    if (e instanceof TypeError) {\n      if ('Cannot create proxy with a non-object as target or handler' === e.message) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\nexport function AsyncFunctionMethod(target: unknown): target is '[object AsyncFunction]' {\n  try {\n    return '[object AsyncFunction]' === isConfig.state.toString.call(target);\n  } catch (e) {\n    return false;\n  }\n}\n\nexport function GeneratorFunctionMethod(target: unknown): target is '[object Generator]' {\n  try {\n    return '[object Generator]' === isConfig.state.toString.call(target);\n  } catch (e) {\n    return false;\n  }\n}\n","import { NumberMethod } from './number.method';\nimport { BigIntMethod } from './bigInt.method';\nimport { EmptyMethod } from '../empty.method';\nimport { SymbolMethod } from '../symbol.method';\nimport regexp from '../../regexp';\n\nexport function NumericMethod(target: any): boolean {\n  if (SymbolMethod(target)) {\n    return false;\n  }\n  target = '' + target;\n  if (EmptyMethod(target)) {\n    return false;\n  }\n  if (NumberMethod(+target)) {\n    return true;\n  }\n  if (regexp.bigint.test(target)) {\n    return BigIntMethod(BigInt(target.slice(0, -1)));\n  }\n  return false;\n}\n","import { NumberMethod } from './number/number.method';\nimport { isConfig } from '../config';\nimport { NumericMethod } from './number/numeric.method';\n\nfunction toNumber(target: any): number {\n  target = +target;\n  if (!NumberMethod(target) && isConfig.error.enabled) {\n    console?.error?.(`\n            Bad data in the method name, good examples: \n            is.len_10\n            is.len_gt_10\n            is.len_lt_10\n            is.len_gt_8_lt_10\n            is.len_gte_10\n            is.len_gte_8_lt_10\n            is.len_gte_8_lte_10\n            is.len_lte_10\n            is.len_gt_8_lte_10\n        `);\n  }\n  return target;\n}\n\nfunction operation(command: string, target: number, value: number): boolean {\n  if (command === 'gt') {\n    return target > value;\n  } else if (command === 'gte') {\n    return target >= value;\n  } else if (command === 'lt') {\n    return target < value;\n  } else if (command === 'lte') {\n    return target <= value;\n  }\n  return false;\n}\n\n/**\n * Why N:\n * - Note that the symbol \"N\" is also sometimes used to represent the set of positive integers, but this can be\n *   ambiguous, as some definitions of \"N\" include zero, while others do not.\n *\n * is.len_N\n * is.len_gt_N\n * is.len_lt_N\n * is.len_gt_N_lt_N\n * is.len_gte_N\n * is.len_gte_N_lt_N\n * is.len_gte_N_lte_N\n * is.len_lte_N\n * is.len_gt_N_lte_N\n *\n * @param target - string\n * @param configList - ['10'] || ['gt', '10']\n */\nexport function LenMethod(target: string, configList: string[]): boolean {\n  const length: number = target?.length ?? 0;\n  if (NumericMethod(configList[0])) {\n    return length === toNumber(configList[0]);\n  } else {\n    for (let index = 0; index < configList.length; index++) {\n      if (operation(configList[index], length, toNumber(configList[index + 1]))) {\n        if (index + 2 === configList.length) {\n          return true;\n        } else {\n          index++;\n        }\n      } else {\n        return false;\n      }\n    }\n  }\n  return false;\n}\n","import { isConfig } from '../../config';\nimport { StringMethod } from '../string/string.method';\nimport regexp from '../../regexp';\n\nexport function WindowsMethod(target: unknown = isConfig.state.platform): boolean {\n  if (StringMethod(target)) {\n    return regexp.windows.test(target);\n  }\n  return false;\n}\n","import { isConfig } from '../../config';\nimport { StringMethod } from '../string/string.method';\nimport regexp from '../../regexp';\n\nexport function IpodMethod(target: unknown = isConfig.state.userAgent): boolean {\n  if (StringMethod(target)) {\n    return regexp.ipod.test(target);\n  }\n  return false;\n}\n","import { isConfig } from '../../config';\nimport { StringMethod } from '../string/string.method';\nimport regexp from '../../regexp';\n\nexport function IpadMethod(target: unknown = isConfig.state.userAgent): boolean {\n  if (StringMethod(target)) {\n    return regexp.ipad.test(target);\n  }\n  return false;\n}\n","import { isConfig } from '../../config';\nimport { StringMethod } from '../string/string.method';\nimport { IpadMethod } from './ipad.method';\nimport regexp from '../../regexp';\n\nexport function IphoneMethod(target: unknown = isConfig.state.userAgent): boolean {\n  if (StringMethod(target)) {\n    return !IpadMethod(target) && regexp.iphone.test(target);\n  }\n  return false;\n}\n","import { isConfig } from '../../config';\nimport { StringMethod } from '../string/string.method';\nimport { WindowsMethod } from '../system/windows.method';\nimport regexp from '../../regexp';\n\nexport function WindowsPhoneMethod(target: unknown = isConfig.state.userAgent): boolean {\n  if (StringMethod(target)) {\n    return WindowsMethod(target) && regexp.phone.test(target);\n  }\n  return false;\n}\n","import { isConfig } from '../../config';\nimport { StringMethod } from '../string/string.method';\nimport regexp from '../../regexp';\n\nexport function BlackberryMethod(target: unknown = isConfig.state.userAgent): boolean {\n  if (StringMethod(target)) {\n    return regexp.blackberry.test(target);\n  }\n  return false;\n}\n","import { isConfig } from '../../config';\nimport { StringMethod } from '../string/string.method';\nimport regexp from '../../regexp';\n\nexport function AndroidPhoneMethod(target: unknown = isConfig.state.userAgent): boolean {\n  if (StringMethod(target)) {\n    return regexp.androidPhone.test(target);\n  }\n  return false;\n}\n","import regexp from '../../../../regexp';\nimport { StringMethod } from '../../string.method';\n\n/**\n * ISO 8601 format.\n */\nexport function IsoMethod(iso: string): boolean {\n  if (!StringMethod(iso)) {\n    return false;\n  }\n  return regexp.iso.any.test(iso);\n}\n","import {ArrayMethod} from './array.method';\nimport {BigIntMethod} from './number/bigInt.method';\nimport {BooleanMethod} from './boolean/boolean.method';\nimport {SameMethod} from './same.method';\nimport {\n    ArrayEmptyMethod,\n    ArrayEmptyMethodExecute,\n    EmptyMethod,\n    ObjectEmptyMethod,\n    ObjectEmptyMethodExecute,\n    StringEmptyMethod,\n    StringEmptyMethodExecute,\n} from './empty.method';\nimport {FalseMethod} from './boolean/false.method';\nimport {FalsyMethod} from './boolean/falsy.method';\nimport {InstanceofMethod} from './instanceof.method';\nimport {NullMethod} from './null.method';\nimport {NumberMethod} from './number/number.method';\nimport {ObjectMethod, StrictObjectMethod} from './object.method';\nimport {StringMethod} from './string/string.method';\nimport {SymbolMethod} from './symbol.method';\nimport {TrueMethod} from './boolean/true.method';\nimport {TruthyMethod} from './boolean/truthy.method';\nimport {UndefinedMethod} from './undefined.method';\nimport {ZeroMethod} from './number/zero.method';\nimport {PrimitiveMethod} from './primitive.method';\nimport {PromiseMethod} from './promise.method';\nimport {AsyncFunctionMethod, FunctionMethod, GeneratorFunctionMethod} from './function.method';\nimport {PositiveMethod} from './number/positive.method';\nimport {NegativeMethod} from './number/negative.method';\nimport {InfinityMethod} from './number/infinity.method';\nimport {Ipv6Method} from './string/ipv6.method';\nimport {Ipv4Method} from './string/ipv4.method';\nimport {MacAddressMethod} from './string/mac-address.method';\nimport {WordMethod} from './string/word.method';\nimport {OddMethod} from './number/odd.method';\nimport {EvenMethod} from './number/even.method';\nimport {LenMethod} from './len.method';\nimport {NumericMethod} from './number/numeric.method';\nimport {IntMethod} from './number/int.method';\nimport {CharMethod} from './string/char.method';\nimport {PascalCaseMethod} from './string/register/pascal-case.method';\nimport {KebabCaseMethod} from './string/register/kebab-case.method';\nimport {CamelCaseMethod} from './string/register/camel-case.method';\nimport {SnakeCaseMethod} from './string/register/snake-case.method';\nimport {UpperCaseMethod} from './string/register/upper-case.method';\nimport {LowerCaseMethod} from './string/register/lower-case.method';\nimport {SafariMethod} from './browser/safari.method';\nimport {FirefoxMethod} from './browser/firefox.method';\nimport {AndroidMethod} from './system/android.method';\nimport {PhoneMethod} from './hardware/phone.method';\nimport {WindowsMethod} from './system/windows.method';\nimport {OperaMethod} from './browser/opera.method';\nimport {IpodMethod} from './hardware/ipod.method';\nimport {IphoneMethod} from './hardware/iphone.method';\nimport {IpadMethod} from './hardware/ipad.method';\nimport {IosMethod} from './system/ios.method';\nimport {IeMethod} from './browser/ie.method';\nimport {EdgeMethod} from './browser/edge.method';\nimport {BrowserMethod} from './browser/browser.method';\nimport {MacMethod} from './system/mac.method';\nimport {ChromeMethod} from './browser/chrome.method';\nimport {WindowsPhoneMethod} from './hardware/windows-phone.method';\nimport {BlackberryMethod} from './hardware/blackberry.method';\nimport {AndroidPhoneMethod} from './hardware/android-phone.method';\nimport {MobileMethod} from './hardware/mobile.method';\nimport {OnlySpaceMethod, SpaceMethod} from './string/space.method';\nimport {TodayMethod} from './string/date/today.method';\nimport {IsoFutureMethod} from './string/date/iso/iso-future.method';\nimport {IsoPastMethod} from './string/date/iso/iso-past.method';\nimport {IsoMethod} from './string/date/iso/iso.method';\nimport {TomorrowMethod} from './string/date/tomorrow.method';\nimport {YesterdayMethod} from './string/date/yesterday.method';\n\n\nexport const is = {\n    // Browser\n    firefox: FirefoxMethod,\n    opera: OperaMethod,\n    ie: IeMethod,\n    edge: EdgeMethod,\n    safari: SafariMethod,\n    browser: BrowserMethod,\n    chrome: ChromeMethod,\n    // System\n    ios: IosMethod,\n    android: AndroidMethod,\n    windows: WindowsMethod,\n    mac: MacMethod,\n    // Hardware\n    phone: PhoneMethod,\n    ipod: IpodMethod,\n    iphone: IphoneMethod,\n    ipad: IpadMethod,\n    windowsPhone: WindowsPhoneMethod,\n    blackberry: BlackberryMethod,\n    androidPhone: AndroidPhoneMethod,\n    mobile: MobileMethod,\n    // Boolean\n    boolean: BooleanMethod,\n    false: FalseMethod,\n    falsy: FalsyMethod,\n    true: TrueMethod,\n    truthy: TruthyMethod,\n    // Number\n    odd: OddMethod,\n    positive: PositiveMethod,\n    zero: ZeroMethod,\n    int: IntMethod,\n    infinity: InfinityMethod,\n    number: NumberMethod,\n    numeric: NumericMethod,\n    // String\n    string: StringMethod,\n    onlySpace: OnlySpaceMethod,\n    space: SpaceMethod,\n    pascalCase: PascalCaseMethod,\n    upperCase: UpperCaseMethod,\n    kebabCase: KebabCaseMethod,\n    macAddress: MacAddressMethod,\n    camelCase: CamelCaseMethod,\n    word: WordMethod,\n    snakeCase: SnakeCaseMethod,\n    ipv4: Ipv4Method,\n    ipv6: Ipv6Method,\n    char: CharMethod,\n    lowerCase: LowerCaseMethod,\n    today: TodayMethod,\n    tomorrow: TomorrowMethod,\n    yesterday: YesterdayMethod,\n    isoFuture: IsoFutureMethod,\n    isoPast: IsoPastMethod,\n    iso: IsoMethod,\n    // Other\n    len: LenMethod,\n    array: ArrayMethod,\n    asyncFunction: AsyncFunctionMethod,\n    bigInt: BigIntMethod,\n    compare: SameMethod, // Deprecated, delete in the future, use 'same' instead\n    same: SameMethod,\n    empty: EmptyMethod,\n    even: EvenMethod,\n    function: FunctionMethod,\n    generatorFunction: GeneratorFunctionMethod,\n    instanceof: InstanceofMethod,\n    negative: NegativeMethod,\n    null: NullMethod,\n    object: ObjectMethod,\n    strictObject: StrictObjectMethod,\n    primitive: PrimitiveMethod,\n    promise: PromiseMethod,\n    symbol: SymbolMethod,\n    undefined: UndefinedMethod,\n\n    // Predefined combinations of methods\n    object_not_empty<T>(target: unknown): target is T {\n        return ObjectMethod(target) && !ObjectEmptyMethodExecute(target);\n    },\n    object_empty<T>(target: unknown): target is T {\n        return ObjectEmptyMethod(target);\n    },\n    string_not_empty<T>(target: unknown): target is T {\n        return StringMethod(target) && !StringEmptyMethodExecute(target);\n    },\n    string_empty<T>(target: unknown): target is T {\n        return StringEmptyMethod(target);\n    },\n    array_not_empty<T>(target: unknown): target is T {\n        return ArrayMethod(target) && !ArrayEmptyMethodExecute(target);\n    },\n    array_empty<T>(target: unknown): target is T {\n        return ArrayEmptyMethod(target);\n    },\n\n};\n","import { isConfig } from '../../config';\nimport { StringMethod } from '../string/string.method';\nimport regexp from '../../regexp';\n\n/**\n * If you need to check custom userAgent use argument \"target\" if you check your browser, please use with BrowserMethod: is.browser.safari\n */\nexport function FirefoxMethod(target: unknown = isConfig.state.userAgent): boolean {\n  if (StringMethod(target)) {\n    return regexp.firefox.test(target);\n  }\n  return false;\n}\n","import { isConfig } from '../../config';\nimport { StringMethod } from '../string/string.method';\nimport regexp from '../../regexp';\n\n/**\n * If you need to check custom userAgent use argument \"target\" if you check your browser, please use with BrowserMethod: is.browser.safari\n */\nexport function OperaMethod(target: unknown = isConfig.state.userAgent): boolean {\n  if (StringMethod(target)) {\n    return regexp.opera.test(target);\n  }\n  return false;\n}\n","import { isConfig } from '../../config';\nimport { StringMethod } from '../string/string.method';\nimport regexp from '../../regexp';\n\n/**\n * If you need to check custom userAgent use argument \"target\" if you check your browser, please use with BrowserMethod: is.browser.safari\n */\nexport function IeMethod(target: unknown = isConfig.state.userAgent): boolean {\n  if (StringMethod(target)) {\n    return regexp.ie.test(target);\n  }\n  return false;\n}\n","import { isConfig } from '../../config';\nimport { StringMethod } from '../string/string.method';\nimport regexp from '../../regexp';\n\n/**\n * If you need to check custom userAgent use argument \"target\" if you check your browser, please use with BrowserMethod: is.browser.safari\n */\nexport function EdgeMethod(target: unknown = isConfig.state.userAgent): boolean {\n  if (StringMethod(target)) {\n    return regexp.edge.test(target);\n  }\n  return false;\n}\n","import { isConfig } from '../../config';\nimport { StringMethod } from '../string/string.method';\nimport regexp from '../../regexp';\n\n/**\n * If you need to check custom userAgent use argument \"target\" if you check your browser, please use with BrowserMethod: is.browser.safari\n */\nexport function SafariMethod(target: unknown = isConfig.state.userAgent): boolean {\n  if (StringMethod(target)) {\n    return regexp.safari.test(target);\n  }\n  return false;\n}\n","import { isConfig } from '../../config';\nimport { ObjectMethod } from '../object.method';\nimport { EmptyMethod } from '../empty.method';\n\nexport function BrowserMethod(target: unknown = isConfig.state.navigator): boolean {\n  return ObjectMethod(target) && !EmptyMethod(target);\n}\n","import { isConfig } from '../../config';\nimport { StringMethod } from '../string/string.method';\nimport regexp from '../../regexp';\n\n/**\n * If you need to check custom userAgent use argument \"target\" if you check your browser, please use with BrowserMethod: is.browser.safari\n */\nexport function ChromeMethod(\n  target: unknown = isConfig.state.userAgent,\n  vendor: unknown = isConfig.state.vendor,\n): boolean {\n  if (StringMethod(target) && StringMethod(vendor)) {\n    return regexp.chrome.test(target) && regexp.googleInc.test(vendor);\n  }\n  return false;\n}\n","import { IpadMethod } from '../hardware/ipad.method';\nimport { IpodMethod } from '../hardware/ipod.method';\nimport { IphoneMethod } from '../hardware/iphone.method';\n\nexport function IosMethod(target?: unknown): boolean {\n  return IphoneMethod(target) || IpadMethod(target) || IpodMethod(target);\n}\n","import { isConfig } from '../../config';\nimport { StringMethod } from '../string/string.method';\nimport regexp from '../../regexp';\n\nexport function AndroidMethod(target: unknown = isConfig.state.userAgent): boolean {\n  if (StringMethod(target)) {\n    return regexp.android.test(target);\n  }\n  return false;\n}\n","import { isConfig } from '../../config';\nimport { StringMethod } from '../string/string.method';\nimport regexp from '../../regexp';\n\nexport function MacMethod(target: unknown = isConfig.state.platform): boolean {\n  if (StringMethod(target)) {\n    return regexp.mac.test(target);\n  }\n  return false;\n}\n","import { isConfig } from '../../config';\nimport { NumberMethod } from '../number/number.method';\n\nexport function PhoneMethod(target: unknown = isConfig.state.screen.width): boolean {\n  if (NumberMethod(target)) {\n    return target <= isConfig.definition.phone;\n  }\n  return false;\n}\n","import { IphoneMethod } from './iphone.method';\nimport { IpodMethod } from './ipod.method';\nimport { AndroidPhoneMethod } from './android-phone.method';\nimport { BlackberryMethod } from './blackberry.method';\nimport { WindowsPhoneMethod } from './windows-phone.method';\n\nexport function MobileMethod(): boolean {\n  return IphoneMethod() || IpodMethod() || AndroidPhoneMethod() || BlackberryMethod() || WindowsPhoneMethod();\n}\n","export function BooleanMethod(target: unknown): target is boolean {\n  return 'boolean' === typeof target;\n}\n","export function FalseMethod(target: unknown): target is false {\n  return false === target;\n}\n","export function TrueMethod(target: unknown): target is true {\n  return true === target;\n}\n","import { FalsyMethod } from './falsy.method';\n\nexport function TruthyMethod(target: unknown): target is true {\n  return !FalsyMethod(target);\n}\n","import { NumberMethod } from './number.method';\nimport { BigIntMethod } from './bigInt.method';\n\nexport function OddMethod(target: unknown): target is number {\n  let result = false;\n  if (NumberMethod(target)) {\n    target = target % 2;\n    result = 1 === target || -1 === target;\n  } else if (BigIntMethod(target)) {\n    target = target % BigInt(2);\n    result = BigInt(1) === target || BigInt(-1) === target;\n  }\n  return result;\n}\n","import { NumberMethod } from './number.method';\n\nexport function PositiveMethod(target: unknown): target is number {\n  return NumberMethod(target) && 0 < target;\n}\n","import { NumberMethod } from './number.method';\n\nexport function ZeroMethod(target: unknown): target is 0 {\n  return NumberMethod(target) && 0 === target;\n}\n","import { NumberMethod } from './number.method';\n\nexport function IntMethod(target: unknown): target is number {\n  return NumberMethod(target) && Math.floor(target) === target;\n}\n","import { StringMethod } from './string.method';\nimport regexp from '../../regexp';\n\nexport function SpaceMethod(target: string): boolean {\n  if (StringMethod(target) && target.length > 0) {\n    return regexp.anySpace.test(target); // ' ' === true || 'asd ' === true || 'sa d' === true\n  }\n  return false;\n}\n\nexport function OnlySpaceMethod(target: string): boolean {\n  if (StringMethod(target) && target.length > 0) {\n    return regexp.space.test(target); // ' ' === true\n  }\n  return false;\n}\n","import { StringMethod } from '../string.method';\nimport regexp from '../../../regexp';\n\nexport function PascalCaseMethod(target: unknown): target is string {\n  if (StringMethod(target)) {\n    return regexp.pascalCase.test(target);\n  }\n  return false;\n}\n","import { StringMethod } from '../string.method';\nimport regexp from '../../../regexp';\n\n/**\n * Check if `target` is upper case trying to find at least one lower case character.\n */\nexport function UpperCaseMethod(target: unknown): target is string {\n  if (StringMethod(target)) {\n    return !regexp.lowerCase.test(target);\n  }\n  return false;\n}\n","import { StringMethod } from '../string.method';\nimport regexp from '../../../regexp';\n\nexport function KebabCaseMethod(target: unknown): target is string {\n  if (StringMethod(target)) {\n    return regexp.kebabCase.test(target);\n  }\n  return false;\n}\n","import regexp from '../../regexp';\nimport { StringMethod } from './string.method';\n\nexport function MacAddressMethod(target: string): target is string {\n  if (StringMethod(target)) {\n    return regexp.macAddress.test(target);\n  }\n  return false;\n}\n","import { StringMethod } from '../string.method';\nimport regexp from '../../../regexp';\n\nexport function CamelCaseMethod(target: unknown): target is string {\n  if (StringMethod(target)) {\n    return regexp.camelCase.test(target);\n  }\n  return false;\n}\n","import { StringMethod } from './string.method';\nimport regexp from '../../regexp';\n\nexport function WordMethod(target: string): target is string {\n  if (StringMethod(target)) {\n    return regexp.word.test(target);\n  }\n  return false;\n}\n","import { StringMethod } from '../string.method';\nimport regexp from '../../../regexp';\n\nexport function SnakeCaseMethod(target: unknown): target is string {\n  if (StringMethod(target)) {\n    return regexp.snakeCase.test(target);\n  }\n  return false;\n}\n","import regexp from '../../regexp';\nimport { StringMethod } from './string.method';\n\nexport function Ipv4Method(target: string): target is string {\n  if (StringMethod(target)) {\n    return regexp.ipv4.test(target);\n  }\n  return false;\n}\n","import regexp from '../../regexp';\nimport { StringMethod } from './string.method';\n\nexport function Ipv6Method(target: string): target is string {\n  if (StringMethod(target)) {\n    return regexp.ipv6.test(target);\n  }\n  return false;\n}\n","import { StringMethod } from './string.method';\n\nexport function CharMethod(target: unknown): target is string {\n  return StringMethod(target) && 1 === target.length;\n}\n","import { StringMethod } from '../string.method';\nimport regexp from '../../../regexp';\n\n/**\n * Check if `target` is upper case trying to find at least one upper case character.\n */\nexport function LowerCaseMethod(target: unknown): target is string {\n  if (StringMethod(target)) {\n    return !regexp.upperCase.test(target);\n  }\n  return false;\n}\n","import { IsoMethod } from './iso/iso.method';\n\nexport function TodayMethod(dateString: string): boolean {\n  if (!IsoMethod(dateString)) {\n    return false;\n  }\n\n  const today = new Date();\n  const parsedDate = new Date(dateString);\n\n  return parsedDate.toDateString() === today.toDateString();\n}\n","import { IsoMethod } from './iso/iso.method';\n\nexport function TomorrowMethod(target: string): boolean {\n  if (!IsoMethod(target)) {\n    return false;\n  }\n\n  const today = new Date();\n  today.setDate(today.getDate() + 1);\n  const parsedDate = new Date(target);\n\n  return parsedDate.toDateString() === today.toDateString();\n}\n","import { IsoMethod } from './iso/iso.method';\n\nexport function YesterdayMethod(target: string): boolean {\n  if (!IsoMethod(target)) {\n    return false;\n  }\n\n  const today = new Date();\n  const parsedDate = new Date(target);\n  parsedDate.setDate(parsedDate.getDate() + 1);\n\n  return parsedDate.toDateString() === today.toDateString();\n}\n","import { IsoMethod } from './iso.method';\n\nexport function IsoFutureMethod(iso: string): boolean {\n  return IsoMethod(iso) && Date.parse(iso) > Date.now();\n}\n","import { IsoMethod } from './iso.method';\n\nexport function IsoPastMethod(iso: string): boolean {\n  return IsoMethod(iso) && Date.parse(iso) < Date.now();\n}\n","import { NumberMethod } from './number.method';\nimport { BigIntMethod } from './bigInt.method';\n\nexport function EvenMethod(target: unknown): target is number {\n  let result = false;\n  if (NumberMethod(target)) {\n    result = target % 2 === 0;\n  } else if (BigIntMethod(target)) {\n    result = target % BigInt(2) === BigInt(0);\n  }\n  return result;\n}\n","/**\n *\n * @method instanceof\n * @param target object\n * @param classRef link to model\n */\nexport function InstanceofMethod<T>(target: unknown, classRef?: new (...args: any) => T): target is T {\n  if ('classRef' in (this ?? {})) {\n    classRef = this.classRef;\n  }\n  if (classRef instanceof Function) {\n    return target instanceof classRef;\n  }\n  return false;\n}\n","import { NumberMethod } from './number.method';\n\nexport function NegativeMethod(target: unknown): target is number {\n  return NumberMethod(target) && 0 > target;\n}\n","export function NullMethod(target: unknown): target is null {\n  return null === target;\n}\n","export function PrimitiveMethod(target: unknown): boolean {\n  if (null === target) {\n    return true;\n  }\n\n  return !('object' === typeof target || 'function' === typeof target);\n}\n","import { ObjectMethod } from './object.method';\n\nexport function PromiseMethod<T>(target: unknown): target is Promise<T> {\n  if (ObjectMethod(target) && 'then' in target && 'catch' in target) {\n    return 'function' === typeof target.then && 'function' === typeof target.catch;\n  }\n  return false;\n}\n","export function UndefinedMethod(target: unknown): target is undefined {\n  return undefined === target;\n}\n"],"names":["ArrayMethod","target","classRef","Array","length","every","item","BigIntMethod","TypeOfValueEnum","SameMethod","source","_Object$keys","_Object$keys2","keysOfTarget","Object","keys","keysOfSource","_iterator","_step","_createForOfIteratorHelperLoose","done","keyOfObjectTwo","value","object","e","StringMethod","regexp","bigint","word","ipv6","ipv4","macAddress","pascalCase","kebabCase","camelCase","snakeCase","lowerCase","upperCase","safari","firefox","android","windows","opera","iphone","ipad","ipod","ie","edge","mac","chrome","googleInc","phone","blackberry","androidPhone","space","anySpace","iso","date","time","dateTime","dateTimeWithMs","any","isConfig","Config","_this$globalContext$s","_this$globalContext$s2","isNode","isBrowser","globalContext","this","packageName","useGlobalContext","error","enabled","definition","state","vendor","navigator","userAgent","platform","screen","width","toString","prototype","create","_process","instance","process","release","name","window","document","initGlobalContext","initVendor","initUserAgent","initPlatform","_proto","globalThis","global","self","_this$globalContext$n","_this$globalContext$n2","_this$globalContext$n3","_this$globalContext$n4","_process2","userAgentData","ObjectMethod","EmptyMethod","StringEmptyMethod","ArrayEmptyMethod","ObjectEmptyMethod","StringEmptyMethodExecute","undefined","trim","ArrayEmptyMethodExecute","ObjectEmptyMethodExecute","size","key","hasOwnProperty","FalsyMethod","INFINITY","InfinityMethod","NumberMethod","isNaN","SymbolMethod","AsyncFunctionMethod","call","GeneratorFunctionMethod","NumericMethod","test","BigInt","slice","toNumber","_console","console","operation","command","WindowsMethod","IpodMethod","IpadMethod","IphoneMethod","WindowsPhoneMethod","BlackberryMethod","AndroidPhoneMethod","IsoMethod","is","browser","ios","windowsPhone","mobile","boolean","false","falsy","true","truthy","odd","result","positive","zero","int","Math","floor","infinity","number","numeric","string","onlySpace","char","today","dateString","Date","toDateString","tomorrow","setDate","getDate","yesterday","parsedDate","isoFuture","parse","now","isoPast","len","configList","_target$length","index","array","asyncFunction","bigInt","compare","same","empty","even","function","TypeError","message","generatorFunction","instanceof","Function","negative","null","strictObject","primitive","promise","then","symbol","object_not_empty","object_empty","string_not_empty","string_empty","array_not_empty","array_empty"],"mappings":"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"}